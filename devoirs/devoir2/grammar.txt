-- Grammaire dans le style EBNF de notre langage de programmation fonctionnelle
-- Auteurs: Jonathan Friedli et Valentin Kaelin
-- Date dernière modification: 13 juin 2022


-- -----------------------
-- Utilitaires
-- -----------------------

-- littéraux entiers, booléens, tuples;
LetterUppercase -> [A-Z]
LetterLowercase -> [a-z]
Char -> LetterUppercase | LetterLowercase
Number -> [0-9]
Int -> {Number}
Alphanumeric -> Char | Int
Bool -> True | False
Universal -> _

Tuple -> '(' Expr ',' Expr ')'


-- -----------------------
-- Point d'entrée du programme
-- -----------------------

Statement -> {Expr | Def}


-- -----------------------
-- Définitions
-- -----------------------

-- Définitions
Defs -> {Def}

-- Définition globale
Def -> VarDef | FuncDef

-- Définition de variables;
NameDef -> ['_']LetterLowercase{Alphanumeric}
VarDef -> 'var' NameDef '=' Expr

-- Définition de fonctions (non-récursives); 
FuncDef -> 'func' NameDef '(' [Params] ')' '=' Expr
Params -> Type NameDef | TypedTuple
Type -> 'Integer' | 'Boolean' | TypedTuple
TypedTuple -> '(' Params ',' Params ')'


-- -----------------------
-- Expressions
-- -----------------------

Expr -> 
    Value
  | Var 
  | FuncApp
  | LetIn
  | CaseOf
  | UnaryOp Expr
  | Expr BinaryOp Expr

-- Valeurs
Value -> Int | Bool | Tuple

-- Occurrences de variable;
Var -> NameDef

-- Applications de fonction;
-- Note: les fonctions à un seul paramètre sont traitées comme de simples variables
FuncApp -> NameDef '(' FuncArgs ')'
FuncArgs -> Expr | FuncArgs ',' Expr

-- Expressions let-in avec plusieurs définitions; 
LetIn -> 'let' {Def} 'in' Expr

-- Case-of sans gardes avec motifs universel, variable, littéraux;
-- Note: les variables dans les patternes doivent être déclarées avant le case, contrairement à Haskell par exemple
CaseOf -> 'case' Expr 'of' CaseOfPatterns
CaseOfPatterns -> {'(' Pattern  '->' Expr ')'}
Pattern -> Value | Var | Universal

-- opérations unaires, binaires.
UnaryOp -> '-' | '!' | '++' | '--'
BinaryOp -> '+' | '-' | '*' | '/' | '%' | '>' | '<' | '>=' | '<=' | '==' | '!=' | '&&' | '||'
